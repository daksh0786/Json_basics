Json format:
###### ########

JSON stands for JavaScript Object Notation.
JSON is used to send data between computers.
JSON is plain text written in JavaScript object notation.
The JSON format is syntactically similar to the code for creating JavaScript objects.

-- Key points --
1) JavaScript has a built in function for converting JSON strings into JavaScript objects:  JSON.parse()
When receiving data from a web server, the data is always a string. Parse the data with JSON.parse(), and the data becomes a JavaScript object

2) JavaScript also has a built in function for converting an object into a JSON string:     JSON.stringify()
When sending data to a web server, the data has to be a string. Convert a JavaScript object into a string with JSON.stringify()


JSON syntax is derived from JavaScript object notation syntax:

1) Data is in name/value pairs ---- (name: "John") example in 1
2) Data is separated by commas ---- (name: "John",)==>as shown seperated by commas example in 1
3) Curly braces hold objects ---- (objects are initialized with "{}" brackets) example in 1
4) Square brackets hold arrays ---- (["Rohit Sharma",45] holds an array jsut like in 3rd example it is 2D array)

format; {"sale":string,no,bool etc}

	---- format ---
	
		This is a JSON string: '{"name":"John", "age":30, "car":null}'
		
		Inside the JSON string there is a JSON object literal: {"name":"John", "age":30, "car":null}
	
		
		JSON object literals are surrounded by curly braces {}.

		JSON object literals contains key/value pairs.

		Keys and values are separated by a colon.

		Keys must be strings, and values must be a valid JSON data type:

		string
		number
		object
		array
		boolean
		null
		Each key/value pair is separated by a comma.

1)

let person = {
    name: "John",
    contact: {
        phone: "987-654-3210",
        email: "john123@xyz.com",
        address: {
            city: "Berlin",
            country: "Germany"
        }
    }
};

console.log(person.contact.email);             
console.log(person.contact.address.city);

output:
	john123@xyz.com
	Berlin 

2)
let person = {
    name: "Shaun",
    contact: {
        phone: "934-379-1420",
        email: "shaun2000@abc.com",
        address: {
            city: "London",
            country: "United Kingdom"
        }
    }
};

console.log(person["contact"]["email"]);            
console.log(person["contact"]["address"]["country"]);

output:
	shaun2000@abc.com
	United Kingdom
	
	
3)
const arr = [
    ["Rohit Sharma",45],
    ["Virat Kohli",18],
    ["M S Dhoni",7]
];
 
console.log(arr[0][1]);   
console.log(arr[2][0]);

output:
	45
	M S Dhoni
	
4)

let myJSON = {
    "Boss" : "John",
    "Department" : "Finance",
    "Department id": 3,
    "employees":[
        {
            "name":"Shaun",
            "age": 30
        },
        {
            "name":"Paul",
            "age" : 27
        }
    ]
};
 
console.log(myJSON.employees[1].name);    
console.log(myJSON["employees"][1]["name"]);

output:
	Paul
	Paul
	
	
	
Imagine we received this text from a web server:

	'{"name":"John", "age":30, "city":"New York"}'

Use the JavaScript function JSON.parse() to convert text into a JavaScript object:
	
	const obj = JSON.parse('{"name":"John", "age":30, "city":"New York"}');
	
	
	
#### parse function ####	


 --- Functions are not allowed in JSON. If you need to include a function, write it as a string. ---
 
 ex)const text = '{"name":"John", "age":"function () {return 30;}", "city":"New York"}';
	const obj = JSON.parse(text);
	obj.age = eval("(" + obj.age + ")");

	document.getElementById("demo").innerHTML = obj.name + ", " + obj.age();
	
	
	output: John, 30
 
 
 --- Date objects are not allowed in JSON. If you need to include a date, write it as a string. ---
 
ex)	const text = '{"name":"John", "birth":"1986-12-14", "city":"New York"}';
	const obj = JSON.parse(text);
	obj.birth = new Date(obj.birth);

	document.getElementById("demo").innerHTML = obj.name + ", " + obj.birth;
	
	output: 	John, Sun Dec 14 1986 05:30:00 GMT+0530 (India Standard Time)
	
	
#### stringify function ####

--- When storing data, the data has to be a certain format, and regardless of where you choose to store it, text is always one of the legal formats. ---

--- JSON makes it possible to store JavaScript objects as text. ----

	// Storing data:
	const myObj = {name: "John", age: 31, city: "New York"};
	const myJSON = JSON.stringify(myObj);
	localStorage.setItem("testJSON", myJSON);

	// Retrieving data:
	let text = localStorage.getItem("testJSON");
	let obj = JSON.parse(text);
	document.getElementById("demo").innerHTML = obj.name;
	
--- In JSON, date objects are not allowed. The JSON.stringify() function will convert any dates into strings. similar is the case for functions ----

1)	const obj = {name: "John", today: new Date(), city : "New York"};
	const myJSON = JSON.stringify(obj);
	
2)  const obj = {name: "John", age: function () {return 30;}, city: "New York"};
	const myJSON = JSON.stringify(obj);
	
##########################

---- exaqmple of loop ----
	
	--- example-1) ---
	const myJSON = '{"name":"John", "age":30, "car":null}';
	const myObj = JSON.parse(myJSON);

	let text = "";
	for (const x in myObj) {
	  text += x + ", ";
	}
	
	output: name, age, car,
	
	--- example-2) ---
	const myJSON = '{"name":"John", "age":30, "car":null}';
	const myObj = JSON.parse(myJSON);

	let text = "";
	for (const x in myObj) {
	  text += myObj[x] + ", ";
	}
	
	output: John, 30, null,
	
	
